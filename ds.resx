<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="rchds1.Text" xml:space="preserve">
    <value>/** 1. Write a program to implement nCr using recursion. **/

#include&lt;stdio.h&gt;
#include&lt;conio.h&gt;
int fact(int n);
void main()
{
	int ans,r,n;
	clrscr();
	printf("\n Enter the values n and r:");
	scanf("%d%d",&amp;n,&amp;r);
	ans=fact(n)/(fact(r)*fact(n-r));
	printf("\n %dC%d=%d",n,r,ans);
	getch();
}
int fact(int n)
{
	if(n==0)
	return(1);
	else
	return(n*fact(n-1));
}</value>
  </data>
  <data name="rchds2.Text" xml:space="preserve">
    <value>/** 2. Write a program to illustrate Towers of Hanoi problem for n disks. **/

#include&lt;stdio.h&gt;
#include&lt;conio.h&gt;
void tower(int n,char A,char B,char C);
int count=0;
void main()
{
	int n;
	clrscr();
	printf("\n Enter the number disks: ");
	scanf("%d",&amp;n);
	tower(n,'A','B','C');
	printf("\n Number of moves=%d",count);
	getch();
}
void tower(int n,char A,char B,char C)
{
	if(n==1)
	{
		printf("Move %c -&gt; %c\n",A,C);
		count++;
	}
	else
	{
		tower(n-1,A,C,B);
		tower(1,A,B,C);
		tower(n-1,B,A,C);
	}
}</value>
  </data>
  <data name="rchds3.Text" xml:space="preserve">
    <value>/** 3. Write a recursive program to print Fibonacci series of n number. **/

#include&lt;stdio.h&gt;
#include&lt;conio.h&gt;
int fib(int n);
void main()
{
	int i,n,ans;
	clrscr();
	printf("\n Enter the number: ");
	scanf("%d",&amp;n);
	printf("\n Fibonacci series are:");
	for(i=1;i&lt;=n;i++)
	{
		ans=fib(i);
		printf(" %d ",ans);
	}
	getch();
}
int fib(int n)
{
	if(n==1)
	return(0);
	else
	if(n==2)
	return(1);
	else
	return(fib(n-1)+fib(n-2));
}</value>
  </data>
  <data name="rchds4.Text" xml:space="preserve">
    <value>/** 4. Write a program to search the given element using sequential search. **/

#include&lt;stdio.h&gt;
#include&lt;conio.h&gt;
int linear(int a[],int n,int key);
void main()
{
	int a[10],n,ele,loc,i,key;
	clrscr();
	printf("\n Enter the number of elements: ");
	scanf("%d",&amp;n);
	printf("\n Enter the array elements: ");
	for(i=0;i&lt;=n;i++)
	scanf("%d",&amp;a[i]);
	printf("\n Enter the key element to search: ");
	scanf("%d",&amp;key);
	loc=linear(a,n,key);
	if(loc==-1)
	{
		printf("\n %d not found",key);
	}
	else
	printf("\n %d found at location %d",key,loc);
	getch();
}
int linear(int a[],int n,int key)
{
	int i;
	for(i=0;i&lt;n;i++)
	{
		if(key==a[i])
		{
			return(i+1);
		}
	}
	return(-1);
}</value>
  </data>
  <data name="rchds5.Text" xml:space="preserve">
    <value>/** 5. Write a program to search the given element using binary search. **/

#include&lt;stdio.h&gt;
#include&lt;conio.h&gt;
int binary(int a[],int n,int key);
void main()
{
	int a[10],n,ele,loc,i,key;
	clrscr();
	printf("\n Enter the number of elements: ");
	scanf("%d",&amp;n);
	printf("\n Enter the array elements: ");
	for(i=0;i&lt;n;i++)
	scanf("%d",&amp;a[i]);
	printf("\n Enter the key element to search: ");
	scanf("%d",&amp;key);
	for(i=0;i&lt;n;i++)
	{
		loc=binary(a,n,key);
	}
	if(loc==-1)
	{
		printf("\n %d not found",key);
	}
	else
	printf("\n %d found at location %d",key,loc);
	getch();
}
int binary(int a[],int n,int key)
{
	int low,mid,high;
	low=0;
	high=n-1;
	while(low&lt;=high)
	{
		mid=(low+high)/2;
		if(key==a[mid])
		{
			return(mid+1);
		}
		if(key&lt;a[mid])
		{
		       high=mid-1;
		}
		else
		low=mid+1;
	}
	return(-1);
}</value>
  </data>
  <data name="rchds6.Text" xml:space="preserve">
    <value>/** 6. Write a program to sort the given n elements using Max Heap sort. **/

#include&lt;stdio.h&gt;
#include&lt;conio.h&gt;
void main()
{
	int a[10],n,i,j,c,root,temp;
	clrscr();
	printf("\n Enter no of elements : ");
	scanf("%d", &amp;n);
	printf("\n Enter the elemets: ");
	for(i=0;i&lt;n;i++)
	scanf("%d", &amp;a[i]);
	for(i=1;i&lt;n;i++)
	{
		c=i;
		do
		{
			root=(c-1)/2;
			if(a[root]&lt;a[c])
			{
				temp=a[root];
				a[root]=a[c];
				a[c]=temp;
			}
			c=root;
		}while(c != 0);
	}
	printf("\n Heap array : ");
	for(i=0;i&lt;n;i++)
	printf("%d ",a[i]);
	for(j=n-1;j&gt;=0;j--)
	{
		temp=a[0];
		a[0]=a[j];
		a[j]=temp;
		root = 0;
		do
		{
			c=2*root+1;
			if((a[c]&lt;a[c+1])&amp;&amp;c&lt;j-1)
			c++;
			if(a[root]&lt;a[c]&amp;&amp;c&lt;j)
			{
				temp=a[root];
				a[root]=a[c];
				a[c]=temp;
			}
			root=c;
		}while(c&lt;j);
	}
	printf("\n The sorted array is : ");
	for (i=0;i&lt;n;i++)
	printf(" %d",a[i]);
	getch();
}</value>
  </data>
  <data name="rchds7.Text" xml:space="preserve">
    <value>/** 7. Write a program to sort the given n elements using Merge sort. **/

#include&lt;stdio.h&gt;
#include&lt;conio.h&gt;
int mergesort(int a[],int low,int high);
int merge(int a[],int low,int mid,int high);
void main()
{
	int a[10],n,i;
	clrscr();
	printf("\n Enter the number of elements: ");
	scanf("%d",&amp;n);
	printf("\n Enter the array elements: ");
	for(i=0;i&lt;n;i++)
	scanf("%d",&amp;a[i]);
	printf("\n Before sorting: ");
	for(i=0;i&lt;n;i++)
	printf("%d ",a[i]);
	mergesort(a,0,n-1);
	printf("\n After sorting: ");
	for(i=0;i&lt;n;i++)
	printf("%d ",a[i]);
	getch();
}
int mergesort(int a[],int low,int high)
{
	int mid;
	if(low&lt;high)
	{
		mid=(low+high)/2;
		mergesort(a,low,mid);
		mergesort(a,mid+1,high);
		merge(a,low,mid,high);
	}
}
int merge(int a[],int low,int mid,int high)
{
	int i,j,k,c[10];
	i=low;
	j=mid+1;
	k=low;
	while((i&lt;=mid)&amp;&amp;(j&lt;=high))
	{
		if(a[i]&lt;=a[j])
		{
			c[k]=a[i];
			k++;
			i++;
		}
		else
		{
			c[k]=a[j];
			k++;
			j++;
		}
	}
	while(i&lt;=mid)
	{
		c[k]=a[i];
		k++;
		i++;
	}
	while(j&lt;=high)
	{
		c[k]=a[j];
		k++;
		j++;
	}
	for(i=low;i&lt;k;i++)
	{
		a[i]=c[i];
	}
}</value>
  </data>
  <data name="rchds8.Text" xml:space="preserve">
    <value>/** 8. Write a program to sort the given n elements using Quick sort. **/

#include&lt;stdio.h&gt;
#include&lt;conio.h&gt;
void quicksort(int a[20],int first,int last)
{
	int i,j,pivot,temp;
	if(first&lt;last)
	{
		pivot=first;
		i=first;
		j=last;
		while(i&lt;j)
		{
			while(a[i]&lt;=a[pivot]&amp;&amp;i&lt;last)
			i++;
			while(a[j]&gt;a[pivot])
			j--;
			if(i&lt;j)
			{
				temp=a[i];
				a[i]=a[j];
				a[j]=temp;
			}
		}
		temp=a[pivot];
		a[pivot]=a[j];
		a[j]=temp;
		quicksort(a,first,j-1);
		quicksort(a,j+1,last);
	}
}
void main()
{
	int i,n,a[20];
	clrscr();
	printf("Enter the number of elemnts: ");
	scanf("%d",&amp;n);
	printf("Enter %d elements: ",n);
	for(i=0;i&lt;n;i++)
	scanf("%d",&amp;a[i]);
	quicksort(a,0,n-1);
	printf("Order of Sorted elements: ");
	for(i=0;i&lt;n;i++)
	printf(" %d",a[i]);
	getch();
}</value>
  </data>
  <data name="rchds9.Text" xml:space="preserve">
    <value>/** 9. Write a program to insert an element into a singly linked list. **/

#include&lt;stdio.h&gt;
#include&lt;conio.h&gt;
#include&lt;alloc.h&gt;
#include&lt;process.h&gt;
struct node
{
	int info;
	struct node *next;
};
void create();
void display();
void iob();
void iom();
void ioe();
struct node *start=NULL;
void main()
{
	int ch;
	clrscr();
	printf("\n Create singly linked list");
	create();
	while(1)
	{
		printf("\n\n------MENU-------");
		printf("\n 1.Insert At Begin");
		printf("\n 2.Insert At Middle");
		printf("\n 3.Insert At End");
		printf("\n 4.Display");
		printf("\n 5.Exit");
		printf("\n Enter your choice: ");
		scanf("%d",&amp;ch);
		switch(ch)
		{
			case 1:iob();break;
			case 2:iom();break;
			case 3:ioe();break;
			case 4:display();break;
			case 5:exit(0);
			default: printf("Invalid Choice\n\n");
		}
	}
}
void iob()
{
	int ele;
	struct  node *newn,*temp;
	printf("\n Enter the element: ");
	scanf("%d",&amp;ele);
	newn=(struct node*)malloc(sizeof(struct node));
	newn-&gt;info=ele;
	newn-&gt;next=start;
	start=newn;
}
void create()
{
	int ele;
	struct node *newn,*temp=start;
	printf("\n Enter the element: ");
	scanf("%d",&amp;ele);
	do
	{
		newn=(struct node*)malloc(sizeof(struct node));
		newn-&gt;info=ele;
		newn-&gt;next=NULL;
		if(start==NULL)
		{
			start=newn;
			temp=newn;
		}
		else
		{
			temp-&gt;next=newn;
			temp=newn;
		}
		printf("\n Enter the element (0 to terminate): ");
		scanf("%d",&amp;ele);
	}
	while(ele!=0);
}
void display()
{
	struct node *temp=start;
	if(start==NULL)
	{
		printf("\n Linked list is empty\n\n");
	}
	else
	{
		while(temp!=NULL)
		{
			printf(" %d ",temp-&gt;info);
			temp=temp-&gt;next;
		}
		printf("NULL\n\n");
	}
}
void ioe()
{
	int ele;
	struct node *temp=start;
	struct node *newn;
	printf("\n Enter the element to insert: ");
	scanf("%d",&amp;ele);
	newn=(struct node*)malloc(sizeof(struct node));
	newn-&gt;info=ele;
	newn-&gt;next=NULL;
	while(temp-&gt;next!=NULL)
	{
		temp=temp-&gt;next;
	}
	temp-&gt;next=newn;
}
void iom()
{
	int ele,key,a=0;
	struct node *temp1=start,*temp2=start-&gt;next,*newn;
	printf("\n Enter the key element: ");
	scanf("%d",&amp;key);
	while(temp1!=NULL)
	{
		if(temp1-&gt;info==key)
		{
			printf("\n Enter the element: ");
			scanf("%d",&amp;ele);
			newn=(struct node*)malloc(sizeof(struct node));
			newn-&gt;info=ele;
			temp1-&gt;next=newn;
			newn-&gt;next=temp2;
			a=1;
			break;
		}
		else
		{
			temp1=temp1-&gt;next;
			temp2=temp2-&gt;next;
		}
	}
	if(a==1)
	{
		printf("\n Insertion successfull\n\n");
	}
	else
	{
		printf("\n Insertion unsuccessfull\n\n");
	}

}</value>
  </data>
  <data name="rchds10.Text" xml:space="preserve">
    <value>/** 10. Write a program to delete an element from a singly linked list. **/

#include&lt;stdio.h&gt;
#include&lt;conio.h&gt;
#include&lt;alloc.h&gt;
#include&lt;process.h&gt;
struct node
{
	int info;
	struct node *next;
};
struct node *start=NULL;
void create();
void display();
void dob();
void dom();
void doe();
void main()
{
	int ch;
	clrscr();
	printf("\n Create linked list");
	create();
	while(1)
	{
		printf("\n-------MENU---------");
		printf("\n 1.Delete at begin");
		printf("\n 2.Delete at middle");
		printf("\n 3.Delete at end");
		printf("\n 4.Display");
		printf("\n 5.Exit");
		printf("\n Enter your choice: ");
		scanf("%d",&amp;ch);
		switch(ch)
		{
			case 1:dob();break;
			case 2:dom();break;
			case 3:doe();break;
			case 4:display();break;
			case 5:exit(0);
			default:printf("\n Invalid choice\n\n");
		}
	}
}
void create()
{
	int ele;
	struct node *newn,*temp;
	printf("\n Enter the element: ");
	scanf("%d",&amp;ele);
	do
	{
		newn=(struct node*)malloc(sizeof(struct node));
		newn-&gt;info=ele;
		newn-&gt;next=NULL;
		if(start==NULL)
		{
			temp=newn;
			start=newn;
		}
		else
		{
			temp-&gt;next=newn;
			temp=newn;
		}
		printf("\n Enter the element to insert(0 to terminate): ");
		scanf("%d",&amp;ele);
	}
	while(ele!=0);
}
void display()
{
	struct node *temp=start;
	if(start==NULL)
	{
		printf("\n EMPTY\n\n");
	}
	else
	{
		while(temp!=NULL)
		{
			printf(" %d ",temp-&gt;info);
			temp=temp-&gt;next;
		}
		printf("\n\n");
	}
}
void dob()
{
	struct node *temp=start;
	if(start==NULL)
	{
		printf("\n EMPTY\n\n");
	}
	else
	{
		start=start-&gt;next;
		temp-&gt;next=NULL;
		printf("\n Deleted element is %d\n\n",temp-&gt;info);
		free(temp);
	}
}
void dom()
{
	struct node *temp1=start,*temp2=start-&gt;next;
	int flag=0,key;
	if(start==NULL)
	printf("Singly linked list is empty");
	else
	{
		printf("Enter the key element to delete: ");
		scanf("%d",&amp;key);
		if(key==start-&gt;info)
		{
			start=start-&gt;next;
			temp1-&gt;next=NULL;
			printf("Deleted element is %d\n\n",temp1-&gt;info);
			free(temp1);
			flag=1;
		}
		else
		{
			while(temp1!=NULL)
			{
				if(temp2-&gt;info==key)
				{
					temp1-&gt;next=temp2-&gt;next;
					temp2-&gt;next=NULL;
					printf("Deleted element is %d\n\n",temp2-&gt;info);
					free(temp2);
					flag=1;
					break;
				}
				else
				{
					temp1=temp1-&gt;next;
					temp2=temp2-&gt;next;
				}
			}
		}
		if(flag==0)
		printf("Key element not found");
	}
}
void doe()
{
	struct node *temp1=start,*temp2=start-&gt;next;
	if(start==NULL)
	{
		printf("\n EMPTY\n\n");
	}
	else
	{
		while(temp2-&gt;next!=NULL)
		{
			temp1=temp1-&gt;next;
			temp2=temp2-&gt;next;
		}
		temp1-&gt;next=NULL;
		printf("\n Deleted element is %d\n\n",temp2-&gt;info);
		free(temp2);
	}
}

</value>
  </data>
  <data name="rchds11.Text" xml:space="preserve">
    <value>/** 11. Write a program to implement stacks using arrays. **/

#include&lt;stdio.h&gt;
#include&lt;stdlib.h&gt;
#define MAX 5
int stack[5];
int top=-1;
void push();
void pop();
void display();
void main()
{
	int ch;
	clrscr();
	while(1)
	{
		printf("\n----MENU----");
		printf("\n 1.PUSH");
		printf("\n 2.POP");
		printf("\n 3.DISPLAY");
		printf("\n 4.EXIT");
		printf("\n Enter your choice: ");
		scanf("%d",&amp;ch);
		switch(ch)
		{
			case 1:push();break;
			case 2:pop();break;
			case 3:display();break;
			case 4:exit(0);
			default:printf("\n Invalid Choice \n\n");
		}
	}
}
void push()
{
	int ele;
	if(top==MAX-1)
	{
		printf("\n Stack is overflow \n\n");
	}
	else
	{
		printf("\n Enter the element to push: ");
		scanf("%d",&amp;ele);
		top++;
		stack[top]=ele;
	}
}
void pop()
{
	if(top==-1)
	{
		printf("\n Stack is underflow \n\n");
	}
	else
	{
		printf("\n Poped element is %d",stack[top]);
		top--;
	}
}
void display()
{
	int i;
	if(top==-1)
	{
		printf("\n Stack is underflow \n\n");
	}
	else
	{
		printf("\n Top-&gt;");
		for(i=top;i&gt;=0;i--)
		printf(" %d ",stack[i]);
		printf("\n \n");
	}
}</value>
  </data>
  <data name="rchds12.Text" xml:space="preserve">
    <value>/** 12. Write a program to implement stacks using linked lists. **/

#include&lt;stdio.h&gt;
#include&lt;conio.h&gt;
#include&lt;process.h&gt;
#include&lt;alloc.h&gt;
struct node
{
	int info;
	struct node *next;
};
struct node *top=NULL;
void push();
void pop();
void display();
void main()
{
	int ch;
	clrscr();
	while(1)
	{
		printf("\n 1.PUSH");
		printf("\n 2.POP");
		printf("\n 3.DISPLAY");
		printf("\n 4.EXIT");
		printf("\n Enter your choice: ");
		scanf("%d",&amp;ch);
		switch(ch)
		{
			case 1:push();break;
			case 2:pop();break;
			case 3:display();break;
			case 4:exit(0);
			default:printf("\n Invalid Choice");
		}
	}
}
void push()
{
	int ele;
	struct node *newn;
	printf("\n Enter the element: ");
	scanf("%d",&amp;ele);
	newn=(struct node*)malloc(sizeof(struct node));
	newn-&gt;info=ele;
	newn-&gt;next=top;
	top=newn;
}
void pop()
{
	struct node *temp=top;
	if(top==NULL)
	{
		printf("\n Stack is underflow");
	}
	else
	{
		top=top-&gt;next;
		temp-&gt;next=NULL;
		printf("\n Poped element is %d",temp-&gt;info);
		free(temp);
	}
}
void display()
{
	struct node *temp=top;
	if(top==NULL)
	{
		printf("\n Stack is underflow");
	}
	else
	{
		printf("\n Top");
		while(temp!=NULL)
		{
			printf(" %d ",temp-&gt;info);
			temp=temp-&gt;next;
		}
		printf(" NULL");
	}
}</value>
  </data>
  <data name="rchds13.Text" xml:space="preserve">
    <value>/** 13. Write a program to convert infix expression into post fix expression. **/

#include&lt;stdio.h&gt;
#include&lt;conio.h&gt;
char stack[20];
int top=-1;
void push(char x)
{
    stack[++top] = x;
}
char pop()
{
	if(top == -1)
	return -1;
	else
	return stack[top--];
}
int priority(char x)
{
	if(x == '(')
	return 0;
	if(x == '+' || x == '-')
	return 1;
	if(x == '*' || x == '/')
	return 2;
}
void main()
{
	char exp[20];
	char *e, x;
	clrscr();
	printf("Enter the expression: ");
	scanf("%s",exp);
	e=exp;
	while(*e!='\0')
	{
		if(isalnum(*e))
		printf("%c",*e);
		else if(*e == '(')
		push(*e);
		else if(*e == ')')
		{
			while((x = pop()) != '(')
			printf("%c", x);
		}
		else
		{
			while(priority(stack[top]) &gt;= priority(*e))
			printf("%c",pop());
			push(*e);
		}
		e++;
	}
	while(top != -1)
	{
		printf("%c",pop());
	}
	getch();
}</value>
  </data>
  <data name="rchds14.Text" xml:space="preserve">
    <value>/** 14.Program to implement queue operation using arrays. **/

#include&lt;stdio.h&gt;
#include&lt;conio.h&gt;
#include&lt;process.h&gt;
#define MAX 5
int q[MAX];
void qinsert();
void qdelete();
void qdisplay();
int rear=-1,front=-1;
void main()
{
	int ch;
	clrscr();
	while(1)
	{
		printf("\n----MENU----");
		printf("\n 1.Q-INSERT");
		printf("\n 2.Q-DELETE");
		printf("\n 3.Q-DISPLAY");
		printf("\n 4.EXIT");
		printf("\n Enter your choice: ");
		scanf("%d",&amp;ch);
		switch(ch)
		{
			case 1:qinsert();break;
			case 2:qdelete();break;
			case 3:qdisplay();break;
			case 4:exit(0);
			default:printf("\n Invalid Choice \n\n");
		}
	}
}
void qinsert()
{
	int ele;
	if(rear==MAX-1)
	{
		printf("\n Queue is full \n\n");
	}
	else
	{
		printf("\n Enter the element to insert: ");
		scanf("%d",&amp;ele);
		if(rear==-1)
		{
			rear=0;
			front=0;
		}
		else
		{
			rear++;
		}
			q[rear]=ele;

	}
}
void qdelete()
{
	if(front==-1)
	{
		printf("\n Queue is empty \n\n");
	}
	else
	{
		printf("\n Deleted element is %d \n\n",q[front]);
		if(front==rear)
		{
			front=-1;
			rear=-1;
		}
		else
		{
			front++;
		}
	}
}
void qdisplay()
{
	int i;
	if(front==-1)
	{
		printf("\n Queue is empty \n\n");
	}
	else
	{
		printf("\n Front -&gt; ");
		for(i=front;i&lt;=rear;i++)
		{
			printf(" %d -&gt; ",q[i]);
		}
		printf("rear \n\n");
	}
}</value>
  </data>
  <data name="rchds15.Text" xml:space="preserve">
    <value>/** 15. Write a program to implement queues using linked lists. **/

#include&lt;stdio.h&gt;
#include&lt;conio.h&gt;
#include&lt;process.h&gt;
#include&lt;alloc.h&gt;
struct node
{
	int info;
	struct node *next;
};
struct node *front=NULL;
struct node *rear=NULL;
void qinsert();
void qdelete();
void qdisplay();
void main()
{
	int ch;
	clrscr();
	while(1)
	{
		printf("\n----MENU----");
		printf("\n 1.Q-INSERT");
		printf("\n 2.Q-DELETE");
		printf("\n 3.Q-DISPLAY");
		printf("\n 4.EXIT");
		printf("\n Enter your choice: ");
		scanf("%d",&amp;ch);
		switch(ch)
		{
			case 1:qinsert();break;
			case 2:qdelete();break;
			case 3:qdisplay();break;
			case 4:exit(0);
			default:printf("\n Invalid Choice \n\n");
		}
	}
}
void qinsert()
{
	int ele;
	struct node *newn;
	printf("\n Enter the element: ");
	scanf("%d",&amp;ele);
	newn=(struct node*)malloc(sizeof(struct node));
	newn-&gt;info=ele;
	newn-&gt;next=NULL;
	if(rear==NULL)
	{
		rear=newn;
		front=newn;
	}
	else
	{
		rear-&gt;next=newn;
		rear=newn;
	}
}
void qdelete()
{
	struct node *temp=front;
	if(front==NULL)
	{
		printf("\n Queue is empty \n\n");
	}
	else
	{
		printf("\n Deleted element is %d \n\n",temp-&gt;info);
		if(front==rear)
		{
			front=NULL;
			rear=NULL;
		}
		else
		{
			front=front-&gt;next;
			temp-&gt;next=NULL;
		}
		free(temp);
	}
}
void qdisplay()
{
	struct node *temp=front;
	if(front==NULL)
	{
		printf("\n Queue is empty \n\n");
	}
	else
	{
		printf("\n Front");
		while(temp!=NULL)
		{
			printf(" %d ",temp-&gt;info);
			temp=temp-&gt;next;
		}
		printf("rear \n\n");
	}
}</value>
  </data>
  <data name="rchds16.Text" xml:space="preserve">
    <value>/** 16. Write a program to implement circular queue using array . **/

#include&lt;stdio.h&gt;
#include&lt;conio.h&gt;
#include&lt;process.h&gt;
#define MAX 5
int cq[MAX];
void cqinsert();
void cqdelete();
void cqdisplay();
int rear=-1,front=-1;
void main()
{
	int ch;
	clrscr();
	while(1)
	{
		printf("\n 1.CQ-INSERT");
		printf("\n 2.CQ-DELETE");
		printf("\n 3.CQ-DISPLAY");
		printf("\n 4.EXIT");
		printf("\n Enter your element: ");
		scanf("%d",&amp;ch);
		switch(ch)
		{
			case 1:cqinsert();break;
			case 2:cqdelete();break;
			case 3:cqdisplay();break;
			case 4:exit(0);
			default:printf("\n Invalid Choice \n\n");
		}
	}
}
void cqinsert()
{
	int ele;
	if((front==0)&amp;&amp;((rear==MAX-1)||(rear==front-1)))
	{
		printf("\n Circular Queue is full \n\n");
	}
	else
	{
		printf("\n Enter the element to insert: ");
		scanf("%d",&amp;ele);
		if(rear==-1)
		{
			rear=0;
			front=0;
		}
		else
		if(rear==MAX-1)
		{
			rear=0;

		}
		else
		{
			rear++;
		}
		cq[rear]=ele;
	}
}
void cqdelete()
{
	if(front==-1)
	{
		printf("'\n C-Queue is empty \n\n");
	}
	else
	{
		printf("\n Deleted element is %d \n\n",cq[front]);
		if(front==rear)
		{
			front=-1;
			rear=-1;
		}
		else
		if(front==MAX-1)
		{
			front=0;
			rear=0;
		}
		else
		{
			front++;
		}
	}
}
void cqdisplay()
{
	int i;
	if(front==-1)
	{
		printf("\n C-Queue is empty \n\n");
	}
	else
	if(rear&lt;front)
	{
		printf("\n Front");
		for(i=front;i&lt;=MAX-1;i++)
		printf(" %d ",cq[i]);
		for(i=0;i&lt;=rear;i++)
		printf(" %d ",cq[i]);
		printf("rear \n\n");
	}
	else
	{
		printf("\n Front");
		for(i=front;i&lt;=rear;i++)
		printf(" %d ",cq[i]);
		printf("rear \n\n");
	}
}</value>
  </data>
  <data name="rchds17.Text" xml:space="preserve">
    <value>/** 17. Write a program to construct a binary search tree and perform tree traversal. **/

#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;
struct node
{
    int value;
    struct node *left;
    struct node *right;
};
struct node* root;
struct node* insert(struct node* r, int data);
void inorder(struct node *r);
void preorder(struct node *r);
void postorder(struct node *r);
void main()
{
	int n,v,i;
	clrscr();
	root = NULL;
	printf("How many data's do you want to insert ?\n");
	scanf("%d", &amp;n);
	for(i=0; i&lt;n; i++)
	{
		printf("Data %d: ", i+1);
		scanf("%d", &amp;v);
		root = insert(root, v);
	}
	printf("Inorder Traversal: ");
	inorder(root);
	printf("\n");
	printf("Preorder Traversal: ");
	preorder(root);
	printf("\n");
	printf("Postorder Traversal: ");
	postorder(root);
	printf("\n");
	getch();
}
struct node* insert(struct node* r, int data)
{
	if(r==NULL)
	{
		r = (struct node*) malloc(sizeof(struct node));
		r-&gt;value = data;
		r-&gt;left = NULL;
		r-&gt;right = NULL;
	}
	else if(data &lt; r-&gt;value)
	{
		r-&gt;left = insert(r-&gt;left, data);
	}
	else
	{
		r-&gt;right = insert(r-&gt;right, data);
	}
	return r;
}

void inorder(struct node* r)
{
	if(r!=NULL)
	{
		inorder(r-&gt;left);
		printf("%d ", r-&gt;value);
		inorder(r-&gt;right);
	}
}
void preorder(struct node* r)
{
	if(r!=NULL)
	{
		printf("%d ", r-&gt;value);
		preorder(r-&gt;left);
		preorder(r-&gt;right);
	}
}
void postorder(struct node* r)
{
	if(r!=NULL)
	{
		postorder(r-&gt;left);
		postorder(r-&gt;right);
		printf("%d ", r-&gt;value);
	}
}</value>
  </data>
  <data name="rchds_con.Text" xml:space="preserve">
    <value>                                                                            Practicals

1. Write a program to implement nCr using recursion.

2. Write a program to illustrate Towers of Hanoi problem for n disks.

3. Write a recursive program to print Fibonacci series of n number.

4. Write a program to search the given element using sequential search.

5. Write a program to search the given element using binary search.

6. Write a program to sort the given n elements using Max Heap sort.

7. Write a program to sort the given n elements using Merge sort.

8. Write a program to sort the given n elements using Quick sort.

9. Write a program to insert an element into a singly linked list.

10. Write a program to delete an element from a singly linked list.

11. Write a program to implement stacks using arrays.

12. Write a program to implement stacks using linked lists.

13. Write a program to convert infix expression into post fix expression.

14. Write a program to implement ordinary queues using arrays.

15. Write a program to implement queues using linked lists.

16. Write a program to implement circular queue using array .

17. Write a program to construct a binary search tree and perform tree traversal.</value>
  </data>
</root>